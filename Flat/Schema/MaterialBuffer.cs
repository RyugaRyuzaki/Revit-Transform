// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Revit_Transform.Flat.Schema
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct MaterialBuffer : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static MaterialBuffer GetRootAsMaterialBuffer(ByteBuffer _bb) { return GetRootAsMaterialBuffer(_bb, new MaterialBuffer()); }
        public static MaterialBuffer GetRootAsMaterialBuffer(ByteBuffer _bb, MaterialBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public MaterialBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Color { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetColorBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetColorBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetColorArray() { return __p.__vector_as_array<byte>(4); }
        public double Opacity { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
        public bool Transparent { get { int o = __p.__offset(8); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
        public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
        public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
        public string Map { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
        public ArraySegment<byte>? GetMapBytes() { return __p.__vector_as_arraysegment(12); }
#endif
        public byte[] GetMapArray() { return __p.__vector_as_array<byte>(12); }
        public string Uuid { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUuidBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
        public ArraySegment<byte>? GetUuidBytes() { return __p.__vector_as_arraysegment(14); }
#endif
        public byte[] GetUuidArray() { return __p.__vector_as_array<byte>(14); }

        public static Offset<Schema.MaterialBuffer> CreateMaterialBuffer(FlatBufferBuilder builder,
            StringOffset colorOffset = default(StringOffset),
            double opacity = 0.0,
            bool transparent = false,
            StringOffset nameOffset = default(StringOffset),
            StringOffset mapOffset = default(StringOffset),
            StringOffset uuidOffset = default(StringOffset))
        {
            builder.StartTable(6);
            MaterialBuffer.AddOpacity(builder, opacity);
            MaterialBuffer.AddUuid(builder, uuidOffset);
            MaterialBuffer.AddMap(builder, mapOffset);
            MaterialBuffer.AddName(builder, nameOffset);
            MaterialBuffer.AddColor(builder, colorOffset);
            MaterialBuffer.AddTransparent(builder, transparent);
            return MaterialBuffer.EndMaterialBuffer(builder);
        }

        public static void StartMaterialBuffer(FlatBufferBuilder builder) { builder.StartTable(6); }
        public static void AddColor(FlatBufferBuilder builder, StringOffset colorOffset) { builder.AddOffset(0, colorOffset.Value, 0); }
        public static void AddOpacity(FlatBufferBuilder builder, double opacity) { builder.AddDouble(1, opacity, 0.0); }
        public static void AddTransparent(FlatBufferBuilder builder, bool transparent) { builder.AddBool(2, transparent, false); }
        public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
        public static void AddMap(FlatBufferBuilder builder, StringOffset mapOffset) { builder.AddOffset(4, mapOffset.Value, 0); }
        public static void AddUuid(FlatBufferBuilder builder, StringOffset uuidOffset) { builder.AddOffset(5, uuidOffset.Value, 0); }
        public static Offset<Schema.MaterialBuffer> EndMaterialBuffer(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<Schema.MaterialBuffer>(o);
        }
    }


    static public class MaterialBufferVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyString(tablePos, 4 /*Color*/, false)
              && verifier.VerifyField(tablePos, 6 /*Opacity*/, 8 /*double*/, 8, false)
              && verifier.VerifyField(tablePos, 8 /*Transparent*/, 1 /*bool*/, 1, false)
              && verifier.VerifyString(tablePos, 10 /*Name*/, false)
              && verifier.VerifyString(tablePos, 12 /*Map*/, false)
              && verifier.VerifyString(tablePos, 14 /*Uuid*/, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
