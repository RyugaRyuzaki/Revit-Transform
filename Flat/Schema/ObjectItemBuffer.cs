// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Revit_Transform.Flat.Schema
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct ObjectItemBuffer : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static ObjectItemBuffer GetRootAsObjectItemBuffer(ByteBuffer _bb) { return GetRootAsObjectItemBuffer(_bb, new ObjectItemBuffer()); }
        public static ObjectItemBuffer GetRootAsObjectItemBuffer(ByteBuffer _bb, ObjectItemBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public ObjectItemBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public Schema.ChildItemBuffer? Children(int j) { int o = __p.__offset(4); return o != 0 ? (Schema.ChildItemBuffer?)(new Schema.ChildItemBuffer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int ChildrenLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
        public string Data { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
        public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
        public byte[] GetDataArray() { return __p.__vector_as_array<byte>(6); }

        public static Offset<Schema.ObjectItemBuffer> CreateObjectItemBuffer(FlatBufferBuilder builder,
            VectorOffset childrenOffset = default(VectorOffset),
            StringOffset dataOffset = default(StringOffset))
        {
            builder.StartTable(2);
            ObjectItemBuffer.AddData(builder, dataOffset);
            ObjectItemBuffer.AddChildren(builder, childrenOffset);
            return ObjectItemBuffer.EndObjectItemBuffer(builder);
        }

        public static void StartObjectItemBuffer(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(0, childrenOffset.Value, 0); }
        public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<Schema.ChildItemBuffer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset<Schema.ChildItemBuffer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Schema.ChildItemBuffer>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Schema.ChildItemBuffer>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
        public static Offset<Schema.ObjectItemBuffer> EndObjectItemBuffer(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<Schema.ObjectItemBuffer>(o);
        }
    }


    static public class ObjectItemBufferVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyVectorOfTables(tablePos, 4 /*Children*/, Schema.ChildItemBufferVerify.Verify, false)
              && verifier.VerifyString(tablePos, 6 /*Data*/, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
