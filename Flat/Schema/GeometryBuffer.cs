// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Revit_Transform.Flat.Schema
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct GeometryBuffer : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static GeometryBuffer GetRootAsGeometryBuffer(ByteBuffer _bb) { return GetRootAsGeometryBuffer(_bb, new GeometryBuffer()); }
        public static GeometryBuffer GetRootAsGeometryBuffer(ByteBuffer _bb, GeometryBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public GeometryBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Uuid { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUuidBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetUuidBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetUuidArray() { return __p.__vector_as_array<byte>(4); }
        public double Position(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
        public int PositionLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetPositionBytes() { return __p.__vector_as_span<double>(6, 8); }
#else
        public ArraySegment<byte>? GetPositionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
        public double[] GetPositionArray() { return __p.__vector_as_array<double>(6); }
        public double Uv(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
        public int UvLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetUvBytes() { return __p.__vector_as_span<double>(8, 8); }
#else
        public ArraySegment<byte>? GetUvBytes() { return __p.__vector_as_arraysegment(8); }
#endif
        public double[] GetUvArray() { return __p.__vector_as_array<double>(8); }

        public static Offset<Schema.GeometryBuffer> CreateGeometryBuffer(FlatBufferBuilder builder,
            StringOffset uuidOffset = default(StringOffset),
            VectorOffset positionOffset = default(VectorOffset),
            VectorOffset uvOffset = default(VectorOffset))
        {
            builder.StartTable(3);
            GeometryBuffer.AddUv(builder, uvOffset);
            GeometryBuffer.AddPosition(builder, positionOffset);
            GeometryBuffer.AddUuid(builder, uuidOffset);
            return GeometryBuffer.EndGeometryBuffer(builder);
        }

        public static void StartGeometryBuffer(FlatBufferBuilder builder) { builder.StartTable(3); }
        public static void AddUuid(FlatBufferBuilder builder, StringOffset uuidOffset) { builder.AddOffset(0, uuidOffset.Value, 0); }
        public static void AddPosition(FlatBufferBuilder builder, VectorOffset positionOffset) { builder.AddOffset(1, positionOffset.Value, 0); }
        public static VectorOffset CreatePositionVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
        public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
        public static void AddUv(FlatBufferBuilder builder, VectorOffset uvOffset) { builder.AddOffset(2, uvOffset.Value, 0); }
        public static VectorOffset CreateUvVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateUvVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateUvVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateUvVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartUvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
        public static Offset<Schema.GeometryBuffer> EndGeometryBuffer(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<Schema.GeometryBuffer>(o);
        }
    }


    static public class GeometryBufferVerify
    {
        static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
        {
            return verifier.VerifyTableStart(tablePos)
              && verifier.VerifyString(tablePos, 4 /*Uuid*/, false)
              && verifier.VerifyVectorOfData(tablePos, 6 /*Position*/, 8 /*double*/, false)
              && verifier.VerifyVectorOfData(tablePos, 8 /*Uv*/, 8 /*double*/, false)
              && verifier.VerifyTableEnd(tablePos);
        }
    }

}
